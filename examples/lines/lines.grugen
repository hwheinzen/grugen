.* Control break example with 2 group levels 
.* and input lines delimited by '\n' and fields by ','
.* ---------------------------------------------------------------------
.gru-file
.gru-name,  string
.gru-group, int
.gru-rec,   detailT
.*
.sl=global
type detailT struct {
	euro int
}
.* ---------------------------------------------------------------------
.sl=o_file
var (
	err      error
	total    int
	nameSum  int
	groupSum int
)
.sl=c_file
	_, err = out.WriteString("\nTotal: € " + fmt.Sprint(total) + "\n")
	if err != nil {
		return err
	}
.* ---------------------------------------------------------------------
.sl=o_name
	nameSum = 0
	_, err = out.WriteString("\n" + name + "\n")
	if err != nil {
		return err
	}
.sl=c_name
	total += nameSum
	_, err = out.WriteString("\tSum for '" + name + "':\t\t€ " + fmt.Sprint(nameSum) + "\n")
	if err != nil {
		return err
	}
.* ---------------------------------------------------------------------
.sl=o_group
	groupSum = 0
	_, err = out.WriteString("\t" + fmt.Sprint(group) + "\n")
	if err != nil {
		return err
	}
.sl=c_group
	nameSum += groupSum
	_, err = out.WriteString("\t\tSum for '" + fmt.Sprint(group) + "':\t€ " + fmt.Sprint(groupSum) + "\n")
	if err != nil {
		return err
	}
.* ---------------------------------------------------------------------
.sl=p_rec
	groupSum += rec.euro
	_, err = out.WriteString("\t\t€ " + fmt.Sprint(rec.euro) + "\n")
	if err != nil {
		return err
	}
.* ---------------------------------------------------------------------
.sl=get
	// string 'line' is given
	parts := strings.Split(line, ",")
	if len(parts) < 3 {
		return errors.New("incomplete line:\n" + line)
	}

	// fill group keys + details
	nameKey = parts[0]
	groupKey, err := strconv.Atoi(parts[1])
	if err != nil {
		return err
	}
	recDetail.euro, err = strconv.Atoi(parts[2])
	if err != nil {
		return err
	}
	
.sl=import
	"errors"
	"strconv"
	"strings"
.* ---------------------------------------------------------------------
